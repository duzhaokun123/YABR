/*
 * ===========================================
 * THIS FILE IS GENERATED BY AI - CAN BE EDITED
 * USE AT YOUR OWN RISK - NO WARRANTY PROVIDED
 * ===========================================
 */
package dev.o0kam1.tools

import android.annotation.SuppressLint
import android.app.AlertDialog
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.view.LayoutInflater
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import io.github.duzhaokun123.module.base.ModuleEntry
import io.github.duzhaokun123.yabr.R
import io.github.duzhaokun123.yabr.module.UICategory
import io.github.duzhaokun123.yabr.module.base.BaseModule
import io.github.duzhaokun123.yabr.module.base.UIComplex
import io.github.duzhaokun123.yabr.utils.ModuleEntryTarget
import io.github.duzhaokun123.yabr.utils.loaderContext

@ModuleEntry(
    id = "dev.o0kam1.tools.NotificationChannelManager",
    targets = [ModuleEntryTarget.MAIN]
)
object NotificationChannelManager : BaseModule(), UIComplex {
    override val name = "通知频道管理器"
    override val description = "查看和删除通知频道"
    override val category = UICategory.TOOL

    override fun onLoad(): Boolean {
        return true
    }

    override fun onCreateUI(context: Context): View {
        val rootView = LayoutInflater.from(context).inflate(R.layout.module_notification_channel_manager, null)
        val container = rootView.findViewById<LinearLayout>(R.id.container_channels)

        populateChannels(context, container)

        return rootView
    }

    @SuppressLint("SetTextI18n")
    private fun populateChannels(context: Context, container: LinearLayout) {
        container.removeAllViews()
        val channels = getAllChannels()

        if (channels.isEmpty()) {
            val noChannelsText = TextView(context).apply {
                text = "没有通知频道"
                textSize = 16f
                setPadding(16, 16, 16, 16)
            }
            container.addView(noChannelsText)
            return
        }

        channels.forEach { channel ->
            val itemLayout = LinearLayout(context).apply {
                orientation = LinearLayout.HORIZONTAL
                setPadding(16, 8, 16, 8)
                gravity = android.view.Gravity.CENTER_VERTICAL
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
            }

            val channelInfo = TextView(context).apply {
                text = "${channel.id}: ${channel.name}" + 
                       if (channel.group?.isNotEmpty() == true) "\n组: ${channel.group}" else "" + 
                       if (channel.description?.isNotEmpty() == true) "\n描述: ${channel.description}" else "" +
                       if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O && channel.parentChannelId?.isNotEmpty() == true) "\n父频道: ${channel.parentChannelId}" else ""
                textSize = 14f
                setLineSpacing(4f, 1f)
                minHeight = (14f * 3 * 1.2f).toInt() // 假设最多3行，1.2倍行高
                layoutParams = LinearLayout.LayoutParams(
                    0,
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    1f
                )
            }

            val deleteButton = Button(context).apply {
                text = "删除"
                setOnClickListener {
                    AlertDialog.Builder(context)
                        .setTitle("确认删除")
                        .setMessage("确定要删除频道 \"${channel.name}\" 吗？")
                        .setPositiveButton("删除") { _, _ ->
                            runCatching {
                                deleteChannel(channel.id)
                                Toast.makeText(context, "频道删除成功", Toast.LENGTH_SHORT).show()
                                populateChannels(context, container) // Refresh list
                            }.onFailure { e ->
                                Toast.makeText(context, "删除失败: ${e.message}", Toast.LENGTH_SHORT).show()
                            }
                        }
                        .setNegativeButton("取消", null)
                        .show()
                }
            }

            itemLayout.addView(channelInfo)
            itemLayout.addView(deleteButton)
            container.addView(itemLayout)
        }
    }

    private val notificationManager by lazy {
        loaderContext.application.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
    }

    /**
     * Deletes a notification channel.
     * Only works on Android API 26+ (Oreo and above).
     *
     * @param id Unique identifier of the channel to delete
     */
    fun deleteChannel(id: String) {
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            notificationManager.deleteNotificationChannel(id)
        }
    }

    /**
     * Gets an existing notification channel.
     * Only works on Android API 26+ (Oreo and above).
     *
     * @param id Unique identifier of the channel
     * @return The NotificationChannel if it exists, null otherwise
     */
    fun getChannel(id: String): NotificationChannel? {
        return if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            notificationManager.getNotificationChannel(id)
        } else {
            null
        }
    }

    /**
     * Gets all notification channels.
     * Only works on Android API 26+ (Oreo and above).
     *
     * @return List of all NotificationChannels
     */
    fun getAllChannels(): List<NotificationChannel> {
        return if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            notificationManager.notificationChannels ?: emptyList()
        } else {
            emptyList()
        }
    }
}